// Code generated by goa v3.21.1, DO NOT EDIT.
//
// chat gRPC client types
//
// Command:
// $ goa gen goa-example/microservices/chat/design

package client

import (
	chat "goa-example/microservices/chat/gen/chat"
	chatpb "goa-example/microservices/chat/gen/grpc/chat/pb"
)

// NewProtoCreateRoomRequest builds the gRPC request type from the payload of
// the "create-room" endpoint of the "chat" service.
func NewProtoCreateRoomRequest() *chatpb.CreateRoomRequest {
	message := &chatpb.CreateRoomRequest{}
	return message
}

// NewCreateRoomResult builds the result type of the "create-room" endpoint of
// the "chat" service from the gRPC response type.
func NewCreateRoomResult(message *chatpb.CreateRoomResponse) string {
	result := message.Field
	return result
}

// NewProtoHistoryRequest builds the gRPC request type from the payload of the
// "history" endpoint of the "chat" service.
func NewProtoHistoryRequest(payload *chat.HistoryPayload) *chatpb.HistoryRequest {
	message := &chatpb.HistoryRequest{
		RoomId: payload.RoomID,
	}
	return message
}

// NewHistoryResult builds the result type of the "history" endpoint of the
// "chat" service from the gRPC response type.
func NewHistoryResult(message *chatpb.HistoryResponse) []*chat.Chat {
	result := make([]*chat.Chat, len(message.Field))
	for i, val := range message.Field {
		result[i] = &chat.Chat{
			Username: val.Username,
			Message:  val.Message_,
			SentAt:   val.SentAt,
		}
	}
	return result
}

func NewStreamRoomResponseChat2(v *chatpb.StreamRoomResponse) *chat.Chat {
	result := &chat.Chat{
		Username: v.Username,
		Message:  v.Message_,
		SentAt:   v.SentAt,
	}
	return result
}

func NewProtoStreamRoomStreamingRequest(spayload string) *chatpb.StreamRoomStreamingRequest {
	v := &chatpb.StreamRoomStreamingRequest{}
	v.Field = spayload
	return v
}
