// Code generated by goa v3.21.1, DO NOT EDIT.
//
// greet gRPC client
//
// Command:
// $ goa gen goa-example/microservices/greet/design

package client

import (
	"context"
	greetpb "goa-example/microservices/greet/gen/grpc/greet/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli greetpb.GreetClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the greet service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: greetpb.NewGreetClient(cc),
		opts:    opts,
	}
}

// Greet calls the "Greet" function in greetpb.GreetClient interface.
func (c *Client) Greet() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildGreetFunc(c.grpccli, c.opts...),
			nil,
			DecodeGreetResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault("%s", err.Error())
		}
		return res, nil
	}
}

// Hello calls the "Hello" function in greetpb.GreetClient interface.
func (c *Client) Hello() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildHelloFunc(c.grpccli, c.opts...),
			EncodeHelloRequest,
			DecodeHelloResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault("%s", err.Error())
		}
		return res, nil
	}
}
