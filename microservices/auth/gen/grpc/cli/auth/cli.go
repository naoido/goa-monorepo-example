// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC client CLI support package
//
// Command:
// $ goa gen goa-example/microservices/auth/design

package cli

import (
	"flag"
	"fmt"
	authc "goa-example/microservices/auth/gen/grpc/auth/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `auth (login|logout|refresh)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth login --message '{
      "password": "Ut soluta.",
      "username": "Minima possimus debitis quam pariatur et dicta."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authLoginFlags       = flag.NewFlagSet("login", flag.ExitOnError)
		authLoginMessageFlag = authLoginFlags.String("message", "", "")

		authLogoutFlags     = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutTokenFlag = authLogoutFlags.String("token", "REQUIRED", "")

		authRefreshFlags       = flag.NewFlagSet("refresh", flag.ExitOnError)
		authRefreshMessageFlag = authRefreshFlags.String("message", "", "")
	)
	authFlags.Usage = authUsage
	authLoginFlags.Usage = authLoginUsage
	authLogoutFlags.Usage = authLogoutUsage
	authRefreshFlags.Usage = authRefreshUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "login":
				epf = authLoginFlags

			case "logout":
				epf = authLogoutFlags

			case "refresh":
				epf = authRefreshFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(cc, opts...)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = authc.BuildLoginPayload(*authLoginMessageFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutTokenFlag)
			case "refresh":
				endpoint = c.Refresh()
				data, err = authc.BuildRefreshPayload(*authRefreshMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `The auth service
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    login: Login
    logout: Logout
    refresh: Refresh

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth login -message JSON

Login
    -message JSON: 

Example:
    %[1]s auth login --message '{
      "password": "Ut soluta.",
      "username": "Minima possimus debitis quam pariatur et dicta."
   }'
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -token STRING

Logout
    -token STRING: 

Example:
    %[1]s auth logout --token "Voluptatem consequatur maiores at cupiditate doloribus."
`, os.Args[0])
}

func authRefreshUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth refresh -message JSON

Refresh
    -message JSON: 

Example:
    %[1]s auth refresh --message '{
      "refresh_token": "Non cum perspiciatis error quasi autem."
   }'
`, os.Args[0])
}
