// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC client encoders and decoders
//
// Command:
// $ goa gen goa-example/microservices/auth/design

package client

import (
	"context"
	auth "goa-example/microservices/auth/gen/auth"
	authpb "goa-example/microservices/auth/gen/grpc/auth/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildLoginFunc builds the remote method to invoke for "auth" service "login"
// endpoint.
func BuildLoginFunc(grpccli authpb.AuthClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Login(ctx, reqpb.(*authpb.LoginRequest), opts...)
		}
		return grpccli.Login(ctx, &authpb.LoginRequest{}, opts...)
	}
}

// EncodeLoginRequest encodes requests sent to auth login endpoint.
func EncodeLoginRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*auth.LoginPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "login", "*auth.LoginPayload", v)
	}
	return NewProtoLoginRequest(payload), nil
}

// DecodeLoginResponse decodes responses from the auth login endpoint.
func DecodeLoginResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*authpb.LoginResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "login", "*authpb.LoginResponse", v)
	}
	res := NewLoginResult(message)
	return res, nil
}

// BuildLogoutFunc builds the remote method to invoke for "auth" service
// "logout" endpoint.
func BuildLogoutFunc(grpccli authpb.AuthClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Logout(ctx, reqpb.(*authpb.LogoutRequest), opts...)
		}
		return grpccli.Logout(ctx, &authpb.LogoutRequest{}, opts...)
	}
}

// EncodeLogoutRequest encodes requests sent to auth logout endpoint.
func EncodeLogoutRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*auth.LogoutPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "logout", "*auth.LogoutPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoLogoutRequest(), nil
}

// BuildRefreshFunc builds the remote method to invoke for "auth" service
// "refresh" endpoint.
func BuildRefreshFunc(grpccli authpb.AuthClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Refresh(ctx, reqpb.(*authpb.RefreshRequest), opts...)
		}
		return grpccli.Refresh(ctx, &authpb.RefreshRequest{}, opts...)
	}
}

// EncodeRefreshRequest encodes requests sent to auth refresh endpoint.
func EncodeRefreshRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*auth.RefreshPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "refresh", "*auth.RefreshPayload", v)
	}
	return NewProtoRefreshRequest(payload), nil
}

// DecodeRefreshResponse decodes responses from the auth refresh endpoint.
func DecodeRefreshResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*authpb.RefreshResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "refresh", "*authpb.RefreshResponse", v)
	}
	res := NewRefreshResult(message)
	return res, nil
}
