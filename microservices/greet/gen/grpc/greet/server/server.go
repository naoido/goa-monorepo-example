// Code generated by goa v3.21.1, DO NOT EDIT.
//
// greet gRPC server
//
// Command:
// $ goa gen goa-example/microservices/greet/design

package server

import (
	"context"
	greet "goa-example/microservices/greet/gen/greet"
	greetpb "goa-example/microservices/greet/gen/grpc/greet/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the greetpb.GreetServer interface.
type Server struct {
	GreetH goagrpc.UnaryHandler
	HelloH goagrpc.UnaryHandler
	greetpb.UnimplementedGreetServer
}

// New instantiates the server struct with the greet service endpoints.
func New(e *greet.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GreetH: NewGreetHandler(e.Greet, uh),
		HelloH: NewHelloHandler(e.Hello, uh),
	}
}

// NewGreetHandler creates a gRPC handler which serves the "greet" service
// "Greet" endpoint.
func NewGreetHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeGreetResponse)
	}
	return h
}

// Greet implements the "Greet" method in greetpb.GreetServer interface.
func (s *Server) Greet(ctx context.Context, message *greetpb.GreetRequest) (*greetpb.GreetResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Greet")
	ctx = context.WithValue(ctx, goa.ServiceKey, "greet")
	resp, err := s.GreetH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*greetpb.GreetResponse), nil
}

// NewHelloHandler creates a gRPC handler which serves the "greet" service
// "Hello" endpoint.
func NewHelloHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeHelloRequest, EncodeHelloResponse)
	}
	return h
}

// Hello implements the "Hello" method in greetpb.GreetServer interface.
func (s *Server) Hello(ctx context.Context, message *greetpb.HelloRequest) (*greetpb.HelloResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Hello")
	ctx = context.WithValue(ctx, goa.ServiceKey, "greet")
	resp, err := s.HelloH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*greetpb.HelloResponse), nil
}
