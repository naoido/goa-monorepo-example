// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC client
//
// Command:
// $ goa gen goa-example/microservices/auth/design

package client

import (
	"context"
	authpb "goa-example/microservices/auth/gen/grpc/auth/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goapb "goa.design/goa/v3/grpc/pb"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli authpb.AuthClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the auth service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: authpb.NewAuthClient(cc),
		opts:    opts,
	}
}

// Login calls the "Login" function in authpb.AuthClient interface.
func (c *Client) Login() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildLoginFunc(c.grpccli, c.opts...),
			EncodeLoginRequest,
			DecodeLoginResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault("%s", err.Error())
			}
		}
		return res, nil
	}
}

// Logout calls the "Logout" function in authpb.AuthClient interface.
func (c *Client) Logout() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildLogoutFunc(c.grpccli, c.opts...),
			EncodeLogoutRequest,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault("%s", err.Error())
			}
		}
		return res, nil
	}
}

// Refresh calls the "Refresh" function in authpb.AuthClient interface.
func (c *Client) Refresh() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildRefreshFunc(c.grpccli, c.opts...),
			EncodeRefreshRequest,
			DecodeRefreshResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault("%s", err.Error())
			}
		}
		return res, nil
	}
}
