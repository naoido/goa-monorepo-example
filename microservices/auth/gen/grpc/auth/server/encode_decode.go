// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC server encoders and decoders
//
// Command:
// $ goa gen goa-example/microservices/auth/design

package server

import (
	"context"
	auth "goa-example/microservices/auth/gen/auth"
	authpb "goa-example/microservices/auth/gen/grpc/auth/pb"
	"strings"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
)

// EncodeLoginResponse encodes responses from the "auth" service "login"
// endpoint.
func EncodeLoginResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*auth.LoginResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "login", "*auth.LoginResult", v)
	}
	resp := NewProtoLoginResponse(result)
	return resp, nil
}

// DecodeLoginRequest decodes requests sent to "auth" service "login" endpoint.
func DecodeLoginRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *authpb.LoginRequest
		ok      bool
	)
	{
		if message, ok = v.(*authpb.LoginRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auth", "login", "*authpb.LoginRequest", v)
		}
	}
	var payload *auth.LoginPayload
	{
		payload = NewLoginPayload(message)
	}
	return payload, nil
}

// EncodeLogoutResponse encodes responses from the "auth" service "logout"
// endpoint.
func EncodeLogoutResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoLogoutResponse()
	return resp, nil
}

// DecodeLogoutRequest decodes requests sent to "auth" service "logout"
// endpoint.
func DecodeLogoutRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var payload *auth.LogoutPayload
	{
		payload = NewLogoutPayload(token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}

// EncodeRefreshResponse encodes responses from the "auth" service "refresh"
// endpoint.
func EncodeRefreshResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*auth.RefreshResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("auth", "refresh", "*auth.RefreshResult", v)
	}
	resp := NewProtoRefreshResponse(result)
	return resp, nil
}

// DecodeRefreshRequest decodes requests sent to "auth" service "refresh"
// endpoint.
func DecodeRefreshRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *authpb.RefreshRequest
		ok      bool
	)
	{
		if message, ok = v.(*authpb.RefreshRequest); !ok {
			return nil, goagrpc.ErrInvalidType("auth", "refresh", "*authpb.RefreshRequest", v)
		}
	}
	var payload *auth.RefreshPayload
	{
		payload = NewRefreshPayload(message)
	}
	return payload, nil
}
