// Code generated by goa v3.21.1, DO NOT EDIT.
//
// greet gRPC client CLI support package
//
// Command:
// $ goa gen goa-example/microservices/greet/design

package cli

import (
	"flag"
	"fmt"
	greetc "goa-example/microservices/greet/gen/grpc/greet/client"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `greet (greet|hello)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` greet greet` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	cc *grpc.ClientConn,
	opts ...grpc.CallOption,
) (goa.Endpoint, any, error) {
	var (
		greetFlags = flag.NewFlagSet("greet", flag.ContinueOnError)

		greetGreetFlags = flag.NewFlagSet("greet", flag.ExitOnError)

		greetHelloFlags     = flag.NewFlagSet("hello", flag.ExitOnError)
		greetHelloTokenFlag = greetHelloFlags.String("token", "REQUIRED", "")
	)
	greetFlags.Usage = greetUsage
	greetGreetFlags.Usage = greetGreetUsage
	greetHelloFlags.Usage = greetHelloUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "greet":
			svcf = greetFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "greet":
			switch epn {
			case "greet":
				epf = greetGreetFlags

			case "hello":
				epf = greetHelloFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "greet":
			c := greetc.NewClient(cc, opts...)
			switch epn {
			case "greet":
				endpoint = c.Greet()
			case "hello":
				endpoint = c.Hello()
				data, err = greetc.BuildHelloPayload(*greetHelloTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// greetUsage displays the usage of the greet command and its subcommands.
func greetUsage() {
	fmt.Fprintf(os.Stderr, `Greet service
Usage:
    %[1]s [globalflags] greet COMMAND [flags]

COMMAND:
    greet: Greet method
    hello: Hello method

Additional help:
    %[1]s greet COMMAND --help
`, os.Args[0])
}
func greetGreetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] greet greet

Greet method

Example:
    %[1]s greet greet
`, os.Args[0])
}

func greetHelloUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] greet hello -token STRING

Hello method
    -token STRING: 

Example:
    %[1]s greet hello --token "Rem libero aperiam consectetur aut tempore error."
`, os.Args[0])
}
