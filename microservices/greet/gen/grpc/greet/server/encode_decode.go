// Code generated by goa v3.21.1, DO NOT EDIT.
//
// greet gRPC server encoders and decoders
//
// Command:
// $ goa gen goa-example/microservices/greet/design

package server

import (
	"context"
	greet "goa-example/microservices/greet/gen/greet"
	"strings"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
)

// EncodeGreetResponse encodes responses from the "greet" service "Greet"
// endpoint.
func EncodeGreetResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("greet", "Greet", "string", v)
	}
	resp := NewProtoGreetResponse(result)
	return resp, nil
}

// EncodeHelloResponse encodes responses from the "greet" service "Hello"
// endpoint.
func EncodeHelloResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(string)
	if !ok {
		return nil, goagrpc.ErrInvalidType("greet", "Hello", "string", v)
	}
	resp := NewProtoHelloResponse(result)
	return resp, nil
}

// DecodeHelloRequest decodes requests sent to "greet" service "Hello" endpoint.
func DecodeHelloRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		token string
		err   error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			token = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var payload *greet.HelloPayload
	{
		payload = NewHelloPayload(token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}
	}
	return payload, nil
}
