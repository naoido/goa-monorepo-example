// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC client CLI support package
//
// Command:
// $ goa gen goa-example/microservices/auth/design

package client

import (
	"encoding/json"
	"fmt"
	auth "goa-example/microservices/auth/gen/auth"
	authpb "goa-example/microservices/auth/gen/grpc/auth/pb"
)

// BuildLoginPayload builds the payload for the auth login endpoint from CLI
// flags.
func BuildLoginPayload(authLoginMessage string) (*auth.LoginPayload, error) {
	var err error
	var message authpb.LoginRequest
	{
		if authLoginMessage != "" {
			err = json.Unmarshal([]byte(authLoginMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"Ut soluta.\",\n      \"username\": \"Minima possimus debitis quam pariatur et dicta.\"\n   }'")
			}
		}
	}
	v := &auth.LoginPayload{
		Username: message.Username,
		Password: message.Password,
	}

	return v, nil
}

// BuildLogoutPayload builds the payload for the auth logout endpoint from CLI
// flags.
func BuildLogoutPayload(authLogoutToken string) (*auth.LogoutPayload, error) {
	var token string
	{
		token = authLogoutToken
	}
	v := &auth.LogoutPayload{}
	v.Token = token

	return v, nil
}

// BuildRefreshPayload builds the payload for the auth refresh endpoint from
// CLI flags.
func BuildRefreshPayload(authRefreshMessage string) (*auth.RefreshPayload, error) {
	var err error
	var message authpb.RefreshRequest
	{
		if authRefreshMessage != "" {
			err = json.Unmarshal([]byte(authRefreshMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"refresh_token\": \"Non cum perspiciatis error quasi autem.\"\n   }'")
			}
		}
	}
	v := &auth.RefreshPayload{
		RefreshToken: message.RefreshToken,
	}

	return v, nil
}
