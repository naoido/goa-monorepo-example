// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth gRPC server
//
// Command:
// $ goa gen goa-example/microservices/auth/design

package server

import (
	"context"
	"errors"
	auth "goa-example/microservices/auth/gen/auth"
	authpb "goa-example/microservices/auth/gen/grpc/auth/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the authpb.AuthServer interface.
type Server struct {
	LoginH   goagrpc.UnaryHandler
	LogoutH  goagrpc.UnaryHandler
	RefreshH goagrpc.UnaryHandler
	authpb.UnimplementedAuthServer
}

// New instantiates the server struct with the auth service endpoints.
func New(e *auth.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		LoginH:   NewLoginHandler(e.Login, uh),
		LogoutH:  NewLogoutHandler(e.Logout, uh),
		RefreshH: NewRefreshHandler(e.Refresh, uh),
	}
}

// NewLoginHandler creates a gRPC handler which serves the "auth" service
// "login" endpoint.
func NewLoginHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLoginRequest, EncodeLoginResponse)
	}
	return h
}

// Login implements the "Login" method in authpb.AuthServer interface.
func (s *Server) Login(ctx context.Context, message *authpb.LoginRequest) (*authpb.LoginResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "login")
	ctx = context.WithValue(ctx, goa.ServiceKey, "auth")
	resp, err := s.LoginH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "unauthenticated":
				return nil, goagrpc.NewStatusError(codes.Unauthenticated, err, goagrpc.NewErrorResponse(err))
			case "invalid_argument":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "internal":
				return nil, goagrpc.NewStatusError(codes.Internal, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*authpb.LoginResponse), nil
}

// NewLogoutHandler creates a gRPC handler which serves the "auth" service
// "logout" endpoint.
func NewLogoutHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLogoutRequest, EncodeLogoutResponse)
	}
	return h
}

// Logout implements the "Logout" method in authpb.AuthServer interface.
func (s *Server) Logout(ctx context.Context, message *authpb.LogoutRequest) (*authpb.LogoutResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "logout")
	ctx = context.WithValue(ctx, goa.ServiceKey, "auth")
	resp, err := s.LogoutH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "invalid_argument":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*authpb.LogoutResponse), nil
}

// NewRefreshHandler creates a gRPC handler which serves the "auth" service
// "refresh" endpoint.
func NewRefreshHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRefreshRequest, EncodeRefreshResponse)
	}
	return h
}

// Refresh implements the "Refresh" method in authpb.AuthServer interface.
func (s *Server) Refresh(ctx context.Context, message *authpb.RefreshRequest) (*authpb.RefreshResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "refresh")
	ctx = context.WithValue(ctx, goa.ServiceKey, "auth")
	resp, err := s.RefreshH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "permission_denied":
				return nil, goagrpc.NewStatusError(codes.PermissionDenied, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*authpb.RefreshResponse), nil
}
