// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen goa-example/microservices/auth/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	Login   goa.Endpoint
	Logout  goa.Endpoint
	Refresh goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Login:   NewLoginEndpoint(s),
		Logout:  NewLogoutEndpoint(s, a.JWTAuth),
		Refresh: NewRefreshEndpoint(s),
	}
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
	e.Logout = m(e.Logout)
	e.Refresh = m(e.Refresh)
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "auth".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}

// NewLogoutEndpoint returns an endpoint function that calls the method
// "logout" of service "auth".
func NewLogoutEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*LogoutPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write", "api:admin"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return nil, s.Logout(ctx, p)
	}
}

// NewRefreshEndpoint returns an endpoint function that calls the method
// "refresh" of service "auth".
func NewRefreshEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*RefreshPayload)
		return s.Refresh(ctx, p)
	}
}
