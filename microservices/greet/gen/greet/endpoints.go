// Code generated by goa v3.21.1, DO NOT EDIT.
//
// greet endpoints
//
// Command:
// $ goa gen goa-example/microservices/greet/design

package greet

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "greet" service endpoints.
type Endpoints struct {
	Greet goa.Endpoint
	Hello goa.Endpoint
}

// NewEndpoints wraps the methods of the "greet" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Greet: NewGreetEndpoint(s),
		Hello: NewHelloEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "greet" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Greet = m(e.Greet)
	e.Hello = m(e.Hello)
}

// NewGreetEndpoint returns an endpoint function that calls the method "Greet"
// of service "greet".
func NewGreetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.Greet(ctx)
	}
}

// NewHelloEndpoint returns an endpoint function that calls the method "Hello"
// of service "greet".
func NewHelloEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*HelloPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{"api:read", "api:write", "api:admin"},
			RequiredScopes: []string{"api:read"},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Hello(ctx, p)
	}
}
