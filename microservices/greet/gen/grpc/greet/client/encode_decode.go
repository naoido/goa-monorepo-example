// Code generated by goa v3.21.1, DO NOT EDIT.
//
// greet gRPC client encoders and decoders
//
// Command:
// $ goa gen goa-example/microservices/greet/design

package client

import (
	"context"
	greet "goa-example/microservices/greet/gen/greet"
	greetpb "goa-example/microservices/greet/gen/grpc/greet/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGreetFunc builds the remote method to invoke for "greet" service
// "Greet" endpoint.
func BuildGreetFunc(grpccli greetpb.GreetClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Greet(ctx, reqpb.(*greetpb.GreetRequest), opts...)
		}
		return grpccli.Greet(ctx, &greetpb.GreetRequest{}, opts...)
	}
}

// DecodeGreetResponse decodes responses from the greet Greet endpoint.
func DecodeGreetResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*greetpb.GreetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("greet", "Greet", "*greetpb.GreetResponse", v)
	}
	res := NewGreetResult(message)
	return res, nil
}

// BuildHelloFunc builds the remote method to invoke for "greet" service
// "Hello" endpoint.
func BuildHelloFunc(grpccli greetpb.GreetClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Hello(ctx, reqpb.(*greetpb.HelloRequest), opts...)
		}
		return grpccli.Hello(ctx, &greetpb.HelloRequest{}, opts...)
	}
}

// EncodeHelloRequest encodes requests sent to greet Hello endpoint.
func EncodeHelloRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*greet.HelloPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("greet", "Hello", "*greet.HelloPayload", v)
	}
	(*md).Append("authorization", payload.Token)
	return NewProtoHelloRequest(), nil
}

// DecodeHelloResponse decodes responses from the greet Hello endpoint.
func DecodeHelloResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*greetpb.HelloResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("greet", "Hello", "*greetpb.HelloResponse", v)
	}
	res := NewHelloResult(message)
	return res, nil
}
