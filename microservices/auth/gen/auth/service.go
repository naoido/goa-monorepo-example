// Code generated by goa v3.21.1, DO NOT EDIT.
//
// auth service
//
// Command:
// $ goa gen goa-example/microservices/auth/design

package auth

import (
	"context"

	"goa.design/goa/v3/security"
)

// The auth service
type Service interface {
	// Login
	Login(context.Context, *LoginPayload) (res *LoginResult, err error)
	// Logout
	Logout(context.Context, *LogoutPayload) (err error)
	// Refresh
	Refresh(context.Context, *RefreshPayload) (res *RefreshResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// APIName is the name of the API as defined in the design.
const APIName = "auth"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"login", "logout", "refresh"}

// LoginPayload is the payload type of the auth service login method.
type LoginPayload struct {
	// username
	Username string
	// password
	Password string
}

// LoginResult is the result type of the auth service login method.
type LoginResult struct {
	AccessToken  string
	RefreshToken string
}

// LogoutPayload is the payload type of the auth service logout method.
type LogoutPayload struct {
	// access_token
	Token string
}

// RefreshPayload is the payload type of the auth service refresh method.
type RefreshPayload struct {
	// refresh_token
	RefreshToken string
}

// RefreshResult is the result type of the auth service refresh method.
type RefreshResult struct {
	AccessToken  string
	RefreshToken string
}

// 処理中に重大なエラーが発生しました
type Internal string

// リクエストされた引数が無効です
type InvalidArgument string

// 権限が不足しています
type PermissionDenied string

// ユーザーが存在しないまたは、パスワードが無効です
type Unauthenticated string

// Error returns an error description.
func (e Internal) Error() string {
	return "処理中に重大なエラーが発生しました"
}

// ErrorName returns "internal".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Internal) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "internal".
func (e Internal) GoaErrorName() string {
	return "internal"
}

// Error returns an error description.
func (e InvalidArgument) Error() string {
	return "リクエストされた引数が無効です"
}

// ErrorName returns "invalid_argument".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e InvalidArgument) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "invalid_argument".
func (e InvalidArgument) GoaErrorName() string {
	return "invalid_argument"
}

// Error returns an error description.
func (e PermissionDenied) Error() string {
	return "権限が不足しています"
}

// ErrorName returns "permission_denied".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e PermissionDenied) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "permission_denied".
func (e PermissionDenied) GoaErrorName() string {
	return "permission_denied"
}

// Error returns an error description.
func (e Unauthenticated) Error() string {
	return "ユーザーが存在しないまたは、パスワードが無効です"
}

// ErrorName returns "unauthenticated".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthenticated) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthenticated".
func (e Unauthenticated) GoaErrorName() string {
	return "unauthenticated"
}
